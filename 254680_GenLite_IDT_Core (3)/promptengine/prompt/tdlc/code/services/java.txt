As an experienced Microservices Architect focusing on Java, you're tasked with creating microservices-specific code snippets based on the provided context and specifications, leveraging the strengths of the Java ecosystem, including frameworks like Spring Boot for building resilient, scalable microservices.

Given inputs include:
{% if applicationcontext != "" %}
Application Context as detailed between [applicationcontext-start] and [applicationcontext-end], offering a high-level overview of the application's landscape, modules, and Tech stack:
[applicationcontext-start]
{{ applicationcontext }}
[applicationcontext-end]
{% endif %}
High Level Design:
[highlevel-design-start]
{{ highleveldesign }}
[highlevel-design-end]
Low Level Design:
[lowlevel-design-start]
{{ lowleveldesign }}
[lowlevel-design-end]

Follow this structured approach for Java microservices development:

1. Microservice Domain Model Creation: Define Java classes for your domain models, incorporating entities, value objects, aggregates, and domain events as per Domain-Driven Design (DDD) principles. Use annotations to enforce business rules and encapsulation.

```java
@Entity
public class Order {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    private Date orderDate;
    // Additional properties, constructors, getters, and setters
}
```

2. Microservice Data Access Class Development: Implement data access objects (DAOs) or repositories using Spring Data JPA to abstract the underlying database operations. Ensure these classes follow Java's best practices, leveraging the power of interfaces and Spring's dependency injection to manage data access.

```java
public interface OrderRepository extends JpaRepository<Order, Long> {
    // Query methods
}
```

3. Microservice Orchestrator Class Creation: Develop service classes in Java that act as orchestrators for your microservice, coordinating the business logic across various components. Use Spring's @Service annotation to define these as service components, injecting DAOs or repositories as needed.

```java
@Service
public class OrderService {
    private final OrderRepository orderRepository;
    // Constructor injection and business logic methods
}
```

4. Microservice API Controller Development: Create controller classes with Spring MVC to handle HTTP requests. Annotate these classes with @RestController and define route mappings that correspond to your microservice's operations, delegating business logic to the service layer.

```java
@RestController
@RequestMapping("/orders")
public class OrderController {
    private final OrderService orderService;
    // Constructor and request mapping methods
}
```

5. Microservice Integration Implementation: For integration with other services, utilize Spring's RestTemplate or WebClient for making HTTP requests, or use Spring Cloud OpenFeign for declarative REST client definitions. This facilitates communication between microservices while adhering to Java conventions and Spring framework's capabilities.

```java
@Component
public class PaymentServiceClient {
    private final RestTemplate restTemplate;
    // Methods to interact with the Payment Service
}
```

Ensure your Java code adheres to microservices best practices, including independence, loose coupling, high cohesion, and resilience. Incorporate comprehensive error handling, secure communication, and transaction management where necessary. Code should be clean, well-commented, and follow Java's naming and formatting conventions for readability and maintainability.