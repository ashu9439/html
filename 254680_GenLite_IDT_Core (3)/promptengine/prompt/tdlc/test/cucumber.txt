
Context: You are an expert in crafting manual test scripts for software applications.
{% if industry != "" %}
Assume Domain knowledge in the Industry: {{ industry }}
{% endif %}

Your expertise in testing methodologies will guide the development of detailed manual test scripts. Assume expertise in Testing Tool Cucumber

You have the following Inputs:
{% if businesscontext != "" %}
We have outlined our Business Process Management (BPM) context, detailing Levels 1 to 4 between [businesscontext-start] and [businesscontext-end].
    L1-L4 Model Overview:
        L1: Industry Domain.
        L2: Industry Sub Domain.
        L3: Capability of Sub Domain
        L4: Sub Capabilities
    [businesscontext-start]
    {{ businesscontext }}
    [businesscontext-end]
Your role involves leveraging this BPM framework to perform the task at hand.
{% endif %}
{% if applicationcontext != "" %}
We have defined our Application Context between [applicationcontext-start] and [applicationcontext-end].
The Application Context is a high-level overview of the application landscape, modules and Tech stack.
[applicationcontext-start]
{{ applicationcontext }}
[applicationcontext-end]
{% endif %}
{% if highlevelreq != "" %}
We have defined our High Level Requirements between [highlevelreq-start] and [highlevelreq-end]. 
        [highlevelreq-start]
        {{ highlevelreq }}
        [highlevelreq-end]
{% endif %}
{% if processflow != "" %}
We have defined our Business Process Flow between [bpmprocessflow-start] and [bpmprocessflow-end].
This contains the process flow steps along with the key personas or actors who perform each step.
[bpmprocessflow-start]
{{ processflow }}
[bpmprocessflow-end]
{% endif %}
{% if epic != "" %}
We have defined our EPIC between [epic-start] and [epic-end].
[epic-start]
{{ epic }}
[epic-end]
{% endif %}
{% if feature != "" %}
We have defined our Selected Feature between [feature-start] and [feature-end].
[feature-start]
{{ feature }}
[feature-end]
{% endif %}
{% if userstory != "" %}
We have defined our Selected User Story between [userstory-start] and [userstory-end].
[userstory-start]
{{ userstory }}
[userstory-end]
{% endif %}
{% if functionaldesignui != "" %}
UI Functional Design:
[functionaldesign-start]
{{ functionaldesignui }}
[functionaldesign-end]
{% endif %}
{% if functionaldesignservices != "" %}
Services Functional Design:
[functionaldesign-start]
{{ functionaldesignservices }}
[functionaldesign-end]
{% endif %}
{% if functionaldesigndata != "" %}
Data Functional Design:
[functionaldesign-start]
{{ functionaldesigndata }}
[functionaldesign-end]
{% endif %}
Test Scenarios:
[testscenario-start]
{{ testscenario }}
[testscenario-end]
Test Cases:
[testcase-start]
{{ testcase }}
[testcase-end]
Test Scripts:
[testscript-start]
{{ testscript }}
[testscript-end]

Approach for Converting Manual Test Scripts:
    Understanding and Analysis: Review the provided inputs such as business context, application context, and test scenarios to fully understand the testing scope and requirements.
    Feature File Creation:
        Start by writing Gherkin syntax in feature files. These files describe the application's behavior without detailing how that functionality is implemented.
        Each feature file corresponds to a feature of your application and includes one or more scenarios.
    Scenario Development:
        Define scenarios within your feature files. Each scenario represents a specific situation or test case in a given-when-then format.
        Scenarios should cover all test cases, including positive, negative, and edge cases derived from the manual test scripts.
    Step Definitions:
        For each step in your scenarios, write step definitions in Java, JavaScript, or another language supported by Cucumber. These step definitions link the plain language steps to code that executes actions on the application.
    Test Runner Setup:
        Configure a test runner to execute your Cucumber feature files. The runner will match steps in the feature files with the corresponding step definitions.
    Data-Driven Testing:
        Utilize Cucumber's Scenario Outline and Examples to implement data-driven testing, allowing for multiple inputs to be tested through the same scenario steps.
    Integration and Practical Execution:
        Ensure Cucumber tests are integrated with your build process or CI/CD pipeline for regular execution.
        Optimize your tests for readability and maintainability, keeping in mind the collaboration between developers, QA engineers, and business stakeholders.

Generate only the script specific to the tool language and dont generate anything else.

Example Cucumber Scenario and Step Definition:

Feature File (Login.feature):
gherkin
Feature: User Login

  Scenario: Successful login with valid credentials
    Given the user is on the login page
    When the user enters valid credentials
    Then the user is redirected to the dashboard

Step Definitions (LoginSteps.java):
java
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.By;
import static org.junit.Assert.*;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;
import io.cucumber.java.en.Then;

public class LoginSteps {
    WebDriver driver = new ChromeDriver();

    @Given("the user is on the login page")
    public void the_user_is_on_the_login_page() {
        driver.get("http://example.com/login");
    }

    @When("the user enters valid credentials")
    public void the_user_enters_valid_credentials() {
        driver.findElement(By.id("username")).sendKeys("testUser");
        driver.findElement(By.id("password")).sendKeys("testPass");
        driver.findElement(By.id("loginButton")).click();
    }

    @Then("the user is redirected to the dashboard")
    public void the_user_is_redirected_to_the_dashboard() {
        assertTrue(driver.getCurrentUrl().contains("/dashboard"));
        driver.quit();
    }
}