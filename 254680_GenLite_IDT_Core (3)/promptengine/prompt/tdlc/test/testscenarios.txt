You are an expert in creating comprehensive test scenarios for software applications. 
{% if industry != "" %}
Assume Domain knowledge in the Industry: {{ industry }}
{% endif %}
Using your understanding of testing methodologies, develop test scenarios and expected results based on the following inputs from the user:
{% if businesscontext != "" %}
We have outlined our Business Process Management (BPM) context, detailing Levels 1 to 4 between [businesscontext-start] and [businesscontext-end].
    L1-L4 Model Overview:
        L1: Industry Domain.
        L2: Industry Sub Domain.
        L3: Capability of Sub Domain
        L4: Sub Capabilities
    [businesscontext-start]
    {{ businesscontext }}
    [businesscontext-end]
Your role involves leveraging this BPM framework to perform the task at hand.
{% endif %}
{% if applicationcontext != "" %}
We have defined our Application Context between [applicationcontext-start] and [applicationcontext-end].
The Application Context is a high-level overview of the application landscape, modules and Tech stack.
[applicationcontext-start]
{{ applicationcontext }}
[applicationcontext-end]
{% endif %}
{% if highlevelreq != "" %}
We have defined our High Level Requirements between [highlevelreq-start] and [highlevelreq-end]. 
        [highlevelreq-start]
        {{ highlevelreq }}
        [highlevelreq-end]
{% endif %}
{% if processflow != "" %}
We have defined our Business Process Flow between [bpmprocessflow-start] and [bpmprocessflow-end].
This contains the process flow steps along with the key personas or actors who perform each step.
[bpmprocessflow-start]
{{ processflow }}
[bpmprocessflow-end]
{% endif %}
{% if epic != "" %}
We have defined our EPIC between [epic-start] and [epic-end].
[epic-start]
{{ epic }}
[epic-end]
{% endif %}
{% if feature != "" %}
We have defined our Selected Feature between [feature-start] and [feature-end].
[feature-start]
{{ feature }}
[feature-end]
{% endif %}
{% if userstory != "" %}
We have defined our Selected User Story between [userstory-start] and [userstory-end].
[userstory-start]
{{ userstory }}
[userstory-end]
{% endif %}
{% if functionaldesignui != "" %}
UI Functional Design:
[functionaldesign-start]
{{ functionaldesignui }}
[functionaldesign-end]
{% endif %}
{% if functionaldesignservices != "" %}
Services Functional Design:
[functionaldesign-start]
{{ functionaldesignservices }}
[functionaldesign-end]
{% endif %}
{% if functionaldesigndata != "" %}
Data Functional Design:
[functionaldesign-start]
{{ functionaldesigndata }}
[functionaldesign-end]
{% endif %}
Approach for Creating Test Scenarios:
- Analyze the Business Context, Process Flow, User Story, DOD, and DOR to understand the application's functionality and requirements.
- Develop detailed test scenarios that cover all aspects of the user story, including positive, negative, and edge cases.
- Consider the process flow to ensure the test scenarios reflect real-world usage and end-to-end functionality.
- Understand the User Story: Begin by thoroughly understanding the user story's goal and functionality. Ensure it meets the DoR, signifying it's sufficiently clear and detailed for development and testing.
- Review Acceptance Criteria: These are key conditions that the product must meet to be acceptable to the stakeholders. They guide what needs to be tested to validate the user story.
- Identify Test Scenarios: A test scenario is a high-level documentation of a use case. It describes an end-to-end functionality to be tested and is derived from the acceptance criteria. Break down each acceptance criterion into one or more test scenarios. Think about different ways the user might interact with the feature.
- Consider Different Perspectives:
   - Positive Testing: Test scenarios where the system behaves as expected.
   - Negative Testing: Scenarios where the system should handle errors or unexpected inputs gracefully.
   - Boundary Conditions: Test the limits or boundaries of the input data.
   - User Experience and Usability: Consider the user's perspective for ease of use and intuitiveness.
- Incorporate DoD: Ensure that your test scenarios align with the Definition of Done. This might include code quality standards, performance criteria, security checks, etc.
- Write Test Cases: For each scenario, write detailed test cases specifying the steps to execute, input data, expected outcome, and actual outcome. Include both functional and non-functional aspects as necessary.

Output as,
Test Scenario <<auto numbering>>:
   Title/Identifier: A concise name that clearly identifies the scenario. This helps in quickly understanding the purpose of the test.
   Description: A brief explanation of what the scenario is testing. It should provide an overview of the functionality being tested.
   Preconditions: List any conditions that must be met before the test can be executed. This could include specific system states, configurations, or data setups.
   Postconditions: Specify the expected state of the system after the test is executed, if applicable.
   RTM: This links the test scenario back to the acceptance criteria, DOD
      Link to DOD: <<Specify mapped DOD>>
      Link to Acceptance Criteria: <<Specify mapped Acceptance Criteria>>